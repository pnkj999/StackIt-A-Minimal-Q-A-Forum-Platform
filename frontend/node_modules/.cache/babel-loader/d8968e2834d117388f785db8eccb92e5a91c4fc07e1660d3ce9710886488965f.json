{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Downloads/stackit/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/contexts/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(null);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      try {\n        const decodedToken = jwtDecode(storedToken);\n\n        // Check if token is expired\n        if (decodedToken.exp * 1000 > Date.now()) {\n          setToken(storedToken);\n          setUser({\n            id: decodedToken.userId,\n            username: decodedToken.username,\n            email: decodedToken.email,\n            role: decodedToken.role\n          });\n        } else {\n          localStorage.removeItem('token');\n          toast.error('Session expired. Please login again.');\n        }\n      } catch (error) {\n        console.error('Invalid token:', error, storedToken);\n        localStorage.removeItem('token');\n        toast.error('Invalid session. Please login again.');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = (newToken, userData) => {\n    if (!newToken || !userData || !userData.username || !userData.email || !userData.id) {\n      console.error('Invalid login payload:', {\n        newToken,\n        userData\n      });\n      toast.error('Login failed: invalid user data returned from server.');\n      return;\n    }\n    localStorage.setItem('token', newToken);\n    setToken(newToken);\n    setUser(userData);\n    toast.success(`Welcome back, ${userData.username}!`);\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n    toast.success('Logged out successfully');\n  };\n  const getAuthHeader = () => {\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  };\n  const updateUser = userData => {\n    setUser(prev => ({\n      ...prev,\n      ...userData\n    }));\n  };\n  const value = {\n    user,\n    token,\n    login,\n    logout,\n    updateUser,\n    getAuthHeader,\n    isAuthenticated: !!user,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"s3+shCSR/t4KywrfJXNOwwFNgWM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jwtDecode","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","storedToken","localStorage","getItem","decodedToken","exp","Date","now","id","userId","username","email","role","removeItem","error","console","login","newToken","userData","setItem","success","logout","getAuthHeader","Authorization","updateUser","prev","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sam/Downloads/stackit/frontend/src/contexts/AuthContext.js"],"sourcesContent":["// frontend/src/contexts/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport toast from 'react-hot-toast';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [token, setToken] = useState(null);\n\n    useEffect(() => {\n        const storedToken = localStorage.getItem('token');\n        if (storedToken) {\n            try {\n                const decodedToken = jwtDecode(storedToken);\n                \n                // Check if token is expired\n                if (decodedToken.exp * 1000 > Date.now()) {\n                    setToken(storedToken);\n                    setUser({\n                        id: decodedToken.userId,\n                        username: decodedToken.username,\n                        email: decodedToken.email,\n                        role: decodedToken.role\n                    });\n                } else {\n                    localStorage.removeItem('token');\n                    toast.error('Session expired. Please login again.');\n                }\n            } catch (error) {\n                console.error('Invalid token:', error, storedToken);\n                localStorage.removeItem('token');\n                toast.error('Invalid session. Please login again.');\n            }\n        }\n        setLoading(false);\n    }, []);\n\n    const login = (newToken, userData) => {\n        if (!newToken || !userData || !userData.username || !userData.email || !userData.id) {\n            console.error('Invalid login payload:', { newToken, userData });\n            toast.error('Login failed: invalid user data returned from server.');\n            return;\n        }\n        localStorage.setItem('token', newToken);\n        setToken(newToken);\n        setUser(userData);\n        toast.success(`Welcome back, ${userData.username}!`);\n    };\n\n    const logout = () => {\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n        toast.success('Logged out successfully');\n    };\n\n    const getAuthHeader = () => {\n        return token ? { Authorization: `Bearer ${token}` } : {};\n    };\n\n    const updateUser = (userData) => {\n        setUser(prev => ({ ...prev, ...userData }));\n    };\n\n    const value = {\n        user,\n        token,\n        login,\n        logout,\n        updateUser,\n        getAuthHeader,\n        isAuthenticated: !!user,\n        loading\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}