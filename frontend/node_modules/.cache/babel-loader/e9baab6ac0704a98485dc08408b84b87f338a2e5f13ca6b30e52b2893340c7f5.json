{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Downloads/stackit/frontend/src/contexts/NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/contexts/NotificationContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotification = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children,\n  socket\n}) => {\n  _s2();\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [notifications, setNotifications] = useState([]);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    if (socket && user) {\n      // Join user room for real-time notifications\n      socket.emit('join', user.id);\n\n      // Listen for new notifications\n      socket.on('notification', notification => {\n        setNotifications(prev => [notification, ...prev]);\n        setUnreadCount(prev => prev + 1);\n\n        // Show toast notification\n        toast(notification.message, {\n          icon: 'ðŸ””',\n          duration: 4000\n        });\n      });\n      return () => {\n        socket.off('notification');\n      };\n    }\n  }, [socket, user]);\n  const markAsRead = notificationIds => {\n    setNotifications(prev => prev.map(notification => notificationIds.includes(notification.id) ? {\n      ...notification,\n      is_read: true\n    } : notification));\n    setUnreadCount(prev => Math.max(0, prev - notificationIds.length));\n  };\n  const addNotification = notification => {\n    setNotifications(prev => [notification, ...prev]);\n    setUnreadCount(prev => prev + 1);\n  };\n  const value = {\n    unreadCount,\n    notifications,\n    setUnreadCount,\n    setNotifications,\n    markAsRead,\n    addNotification\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s2(NotificationProvider, \"g747CCY/iWMcoHLrUDgd2oHfYao=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","toast","jsxDEV","_jsxDEV","NotificationContext","useNotification","_s","context","Error","NotificationProvider","children","socket","_s2","unreadCount","setUnreadCount","notifications","setNotifications","user","emit","id","on","notification","prev","message","icon","duration","off","markAsRead","notificationIds","map","includes","is_read","Math","max","length","addNotification","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sam/Downloads/stackit/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["// frontend/src/contexts/NotificationContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport toast from 'react-hot-toast';\n\nconst NotificationContext = createContext();\n\nexport const useNotification = () => {\n    const context = useContext(NotificationContext);\n    if (!context) {\n        throw new Error('useNotification must be used within a NotificationProvider');\n    }\n    return context;\n};\n\nexport const NotificationProvider = ({ children, socket }) => {\n    const [unreadCount, setUnreadCount] = useState(0);\n    const [notifications, setNotifications] = useState([]);\n    const { user } = useAuth();\n\n    useEffect(() => {\n        if (socket && user) {\n            // Join user room for real-time notifications\n            socket.emit('join', user.id);\n\n            // Listen for new notifications\n            socket.on('notification', (notification) => {\n                setNotifications(prev => [notification, ...prev]);\n                setUnreadCount(prev => prev + 1);\n                \n                // Show toast notification\n                toast(notification.message, {\n                    icon: 'ðŸ””',\n                    duration: 4000,\n                });\n            });\n\n            return () => {\n                socket.off('notification');\n            };\n        }\n    }, [socket, user]);\n\n    const markAsRead = (notificationIds) => {\n        setNotifications(prev => \n            prev.map(notification => \n                notificationIds.includes(notification.id) \n                    ? { ...notification, is_read: true }\n                    : notification\n            )\n        );\n        setUnreadCount(prev => Math.max(0, prev - notificationIds.length));\n    };\n\n    const addNotification = (notification) => {\n        setNotifications(prev => [notification, ...prev]);\n        setUnreadCount(prev => prev + 1);\n    };\n\n    const value = {\n        unreadCount,\n        notifications,\n        setUnreadCount,\n        setNotifications,\n        markAsRead,\n        addNotification\n    };\n\n    return (\n        <NotificationContext.Provider value={value}>\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}