{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Downloads/stackit/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/contexts/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(null);\n  const refreshTimeout = useRef(null);\n\n  // Helper to clear refresh timer\n  const clearRefreshTimer = () => {\n    if (refreshTimeout.current) {\n      clearTimeout(refreshTimeout.current);\n      refreshTimeout.current = null;\n    }\n  };\n\n  // Helper to schedule token refresh\n  const scheduleRefresh = (exp, currentToken) => {\n    clearRefreshTimer();\n    const now = Date.now();\n    const expiry = exp * 1000;\n    const msUntilRefresh = Math.max(expiry - now - 60 * 1000, 0); // 1 min before expiry\n    if (msUntilRefresh > 0) {\n      refreshTimeout.current = setTimeout(() => {\n        refreshToken(currentToken);\n      }, msUntilRefresh);\n    }\n  };\n\n  // Call backend to refresh token\n  const refreshToken = async currentToken => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${currentToken}`\n        }\n      });\n      if (!response.ok) throw new Error('Token refresh failed');\n      const data = await response.json();\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        const decoded = jwtDecode(data.token);\n        setUser({\n          id: decoded.userId,\n          username: decoded.username,\n          email: decoded.email,\n          role: decoded.role\n        });\n        scheduleRefresh(decoded.exp, data.token);\n        toast.success('Session refreshed');\n      } else {\n        throw new Error('No token in refresh response');\n      }\n    } catch (err) {\n      logout();\n      toast.error('Session expired. Please login again.');\n    }\n  };\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      try {\n        const decodedToken = jwtDecode(storedToken);\n        if (decodedToken.exp * 1000 > Date.now()) {\n          setToken(storedToken);\n          setUser({\n            id: decodedToken.userId,\n            username: decodedToken.username,\n            email: decodedToken.email,\n            role: decodedToken.role\n          });\n          scheduleRefresh(decodedToken.exp, storedToken);\n        } else {\n          localStorage.removeItem('token');\n          toast.error('Session expired. Please login again.');\n        }\n      } catch (error) {\n        console.error('Invalid token:', error, storedToken);\n        localStorage.removeItem('token');\n        toast.error('Invalid session. Please login again.');\n      }\n    }\n    setLoading(false);\n    return () => clearRefreshTimer();\n  }, []);\n  useEffect(() => {\n    // If token changes, reset refresh timer\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        scheduleRefresh(decoded.exp, token);\n      } catch (e) {\n        // ignore\n      }\n    } else {\n      clearRefreshTimer();\n    }\n  }, [token]);\n  const login = (newToken, userData) => {\n    if (!newToken || !userData || !userData.username || !userData.email || !userData.id) {\n      console.error('Invalid login payload:', {\n        newToken,\n        userData\n      });\n      toast.error('Login failed: invalid user data returned from server.');\n      return;\n    }\n    localStorage.setItem('token', newToken);\n    setToken(newToken);\n    setUser(userData);\n    try {\n      const decoded = jwtDecode(newToken);\n      scheduleRefresh(decoded.exp, newToken);\n    } catch (e) {}\n    toast.success(`Welcome back, ${userData.username}!`);\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n    clearRefreshTimer();\n    toast.success('Logged out successfully');\n  };\n  const getAuthHeader = () => {\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  };\n  const updateUser = userData => {\n    setUser(prev => ({\n      ...prev,\n      ...userData\n    }));\n  };\n  const value = {\n    user,\n    token,\n    login,\n    logout,\n    updateUser,\n    getAuthHeader,\n    isAuthenticated: !!user,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"n/vXAriEurY1vWe+6H0Aajn+X/g=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","jwtDecode","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","refreshTimeout","clearRefreshTimer","current","clearTimeout","scheduleRefresh","exp","currentToken","now","Date","expiry","msUntilRefresh","Math","max","setTimeout","refreshToken","response","fetch","process","env","REACT_APP_API_URL","method","headers","Authorization","ok","data","json","localStorage","setItem","decoded","id","userId","username","email","role","success","err","logout","error","storedToken","getItem","decodedToken","removeItem","console","e","login","newToken","userData","getAuthHeader","updateUser","prev","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sam/Downloads/stackit/frontend/src/contexts/AuthContext.js"],"sourcesContent":["// frontend/src/contexts/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport toast from 'react-hot-toast';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [token, setToken] = useState(null);\n    const refreshTimeout = useRef(null);\n\n    // Helper to clear refresh timer\n    const clearRefreshTimer = () => {\n        if (refreshTimeout.current) {\n            clearTimeout(refreshTimeout.current);\n            refreshTimeout.current = null;\n        }\n    };\n\n    // Helper to schedule token refresh\n    const scheduleRefresh = (exp, currentToken) => {\n        clearRefreshTimer();\n        const now = Date.now();\n        const expiry = exp * 1000;\n        const msUntilRefresh = Math.max(expiry - now - 60 * 1000, 0); // 1 min before expiry\n        if (msUntilRefresh > 0) {\n            refreshTimeout.current = setTimeout(() => {\n                refreshToken(currentToken);\n            }, msUntilRefresh);\n        }\n    };\n\n    // Call backend to refresh token\n    const refreshToken = async (currentToken) => {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/api/auth/refresh`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${currentToken}`\n                }\n            });\n            if (!response.ok) throw new Error('Token refresh failed');\n            const data = await response.json();\n            if (data.token) {\n                localStorage.setItem('token', data.token);\n                setToken(data.token);\n                const decoded = jwtDecode(data.token);\n                setUser({\n                    id: decoded.userId,\n                    username: decoded.username,\n                    email: decoded.email,\n                    role: decoded.role\n                });\n                scheduleRefresh(decoded.exp, data.token);\n                toast.success('Session refreshed');\n            } else {\n                throw new Error('No token in refresh response');\n            }\n        } catch (err) {\n            logout();\n            toast.error('Session expired. Please login again.');\n        }\n    };\n\n    useEffect(() => {\n        const storedToken = localStorage.getItem('token');\n        if (storedToken) {\n            try {\n                const decodedToken = jwtDecode(storedToken);\n                if (decodedToken.exp * 1000 > Date.now()) {\n                    setToken(storedToken);\n                    setUser({\n                        id: decodedToken.userId,\n                        username: decodedToken.username,\n                        email: decodedToken.email,\n                        role: decodedToken.role\n                    });\n                    scheduleRefresh(decodedToken.exp, storedToken);\n                } else {\n                    localStorage.removeItem('token');\n                    toast.error('Session expired. Please login again.');\n                }\n            } catch (error) {\n                console.error('Invalid token:', error, storedToken);\n                localStorage.removeItem('token');\n                toast.error('Invalid session. Please login again.');\n            }\n        }\n        setLoading(false);\n        return () => clearRefreshTimer();\n    }, []);\n\n    useEffect(() => {\n        // If token changes, reset refresh timer\n        if (token) {\n            try {\n                const decoded = jwtDecode(token);\n                scheduleRefresh(decoded.exp, token);\n            } catch (e) {\n                // ignore\n            }\n        } else {\n            clearRefreshTimer();\n        }\n    }, [token]);\n\n    const login = (newToken, userData) => {\n        if (!newToken || !userData || !userData.username || !userData.email || !userData.id) {\n            console.error('Invalid login payload:', { newToken, userData });\n            toast.error('Login failed: invalid user data returned from server.');\n            return;\n        }\n        localStorage.setItem('token', newToken);\n        setToken(newToken);\n        setUser(userData);\n        try {\n            const decoded = jwtDecode(newToken);\n            scheduleRefresh(decoded.exp, newToken);\n        } catch (e) {}\n        toast.success(`Welcome back, ${userData.username}!`);\n    };\n\n    const logout = () => {\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n        clearRefreshTimer();\n        toast.success('Logged out successfully');\n    };\n\n    const getAuthHeader = () => {\n        return token ? { Authorization: `Bearer ${token}` } : {};\n    };\n\n    const updateUser = (userData) => {\n        setUser(prev => ({ ...prev, ...userData }));\n    };\n\n    const value = {\n        user,\n        token,\n        login,\n        logout,\n        updateUser,\n        getAuthHeader,\n        isAuthenticated: !!user,\n        loading\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {!loading && children}\n        </AuthContext.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}