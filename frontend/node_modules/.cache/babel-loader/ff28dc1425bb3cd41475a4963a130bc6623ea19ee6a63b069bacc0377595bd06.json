{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Downloads/stackit/frontend/src/contexts/NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/contexts/NotificationContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotification = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children,\n  socket\n}) => {\n  _s2();\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [notifications, setNotifications] = useState([]);\n  const {\n    user,\n    token\n  } = useAuth();\n\n  // Fetch notifications from backend on login/user change\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      if (!user || !token) return;\n      try {\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/api/notifications`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error('Failed to fetch notifications');\n        const data = await response.json();\n        setNotifications(data.notifications);\n        setUnreadCount(data.notifications.filter(n => !n.is_read).length);\n      } catch (err) {\n        setNotifications([]);\n        setUnreadCount(0);\n      }\n    };\n    fetchNotifications();\n  }, [user, token]);\n  useEffect(() => {\n    if (socket && user) {\n      // Join user room for real-time notifications\n      socket.emit('join', user.id);\n\n      // Listen for new notifications\n      socket.on('notification', notification => {\n        setNotifications(prev => [notification, ...prev]);\n        setUnreadCount(prev => prev + 1);\n        toast(notification.message, {\n          icon: 'ðŸ””',\n          duration: 4000\n        });\n      });\n      return () => {\n        socket.off('notification');\n      };\n    }\n  }, [socket, user]);\n\n  // Mark notifications as read in backend and update state\n  const markAsRead = async notificationIds => {\n    setNotifications(prev => prev.map(notification => notificationIds.includes(notification.id) ? {\n      ...notification,\n      is_read: true\n    } : notification));\n    setUnreadCount(prev => Math.max(0, prev - notificationIds.length));\n    if (token && notificationIds.length > 0) {\n      try {\n        await fetch(`${process.env.REACT_APP_API_URL}/api/notifications/mark-read`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            notificationIds\n          })\n        });\n      } catch (err) {\n        // ignore for now\n      }\n    }\n  };\n  const addNotification = notification => {\n    setNotifications(prev => [notification, ...prev]);\n    setUnreadCount(prev => prev + 1);\n  };\n  const value = {\n    unreadCount,\n    notifications,\n    setUnreadCount,\n    setNotifications,\n    markAsRead,\n    addNotification\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s2(NotificationProvider, \"v5U8RH/MCsbxISbOE7LAMUxQyQg=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","toast","jsxDEV","_jsxDEV","NotificationContext","useNotification","_s","context","Error","NotificationProvider","children","socket","_s2","unreadCount","setUnreadCount","notifications","setNotifications","user","token","fetchNotifications","response","fetch","process","env","REACT_APP_API_URL","headers","Authorization","ok","data","json","filter","n","is_read","length","err","emit","id","on","notification","prev","message","icon","duration","off","markAsRead","notificationIds","map","includes","Math","max","method","body","JSON","stringify","addNotification","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sam/Downloads/stackit/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["// frontend/src/contexts/NotificationContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport toast from 'react-hot-toast';\n\nconst NotificationContext = createContext();\n\nexport const useNotification = () => {\n    const context = useContext(NotificationContext);\n    if (!context) {\n        throw new Error('useNotification must be used within a NotificationProvider');\n    }\n    return context;\n};\n\nexport const NotificationProvider = ({ children, socket }) => {\n    const [unreadCount, setUnreadCount] = useState(0);\n    const [notifications, setNotifications] = useState([]);\n    const { user, token } = useAuth();\n\n    // Fetch notifications from backend on login/user change\n    useEffect(() => {\n        const fetchNotifications = async () => {\n            if (!user || !token) return;\n            try {\n                const response = await fetch(`${process.env.REACT_APP_API_URL}/api/notifications`, {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                if (!response.ok) throw new Error('Failed to fetch notifications');\n                const data = await response.json();\n                setNotifications(data.notifications);\n                setUnreadCount(data.notifications.filter(n => !n.is_read).length);\n            } catch (err) {\n                setNotifications([]);\n                setUnreadCount(0);\n            }\n        };\n        fetchNotifications();\n    }, [user, token]);\n\n    useEffect(() => {\n        if (socket && user) {\n            // Join user room for real-time notifications\n            socket.emit('join', user.id);\n\n            // Listen for new notifications\n            socket.on('notification', (notification) => {\n                setNotifications(prev => [notification, ...prev]);\n                setUnreadCount(prev => prev + 1);\n                toast(notification.message, {\n                    icon: 'ðŸ””',\n                    duration: 4000,\n                });\n            });\n\n            return () => {\n                socket.off('notification');\n            };\n        }\n    }, [socket, user]);\n\n    // Mark notifications as read in backend and update state\n    const markAsRead = async (notificationIds) => {\n        setNotifications(prev =>\n            prev.map(notification =>\n                notificationIds.includes(notification.id)\n                    ? { ...notification, is_read: true }\n                    : notification\n            )\n        );\n        setUnreadCount(prev => Math.max(0, prev - notificationIds.length));\n        if (token && notificationIds.length > 0) {\n            try {\n                await fetch(`${process.env.REACT_APP_API_URL}/api/notifications/mark-read`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`\n                    },\n                    body: JSON.stringify({ notificationIds })\n                });\n            } catch (err) {\n                // ignore for now\n            }\n        }\n    };\n\n    const addNotification = (notification) => {\n        setNotifications(prev => [notification, ...prev]);\n        setUnreadCount(prev => prev + 1);\n    };\n\n    const value = {\n        unreadCount,\n        notifications,\n        setUnreadCount,\n        setNotifications,\n        markAsRead,\n        addNotification\n    };\n\n    return (\n        <NotificationContext.Provider value={value}>\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}