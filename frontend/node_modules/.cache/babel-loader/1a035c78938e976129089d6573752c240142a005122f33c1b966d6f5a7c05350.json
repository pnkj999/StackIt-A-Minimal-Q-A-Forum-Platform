{"ast":null,"code":"// frontend/src/contexts/NotificationContext.js\nimport React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./AuthContext';import toast from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext();export const useNotification=()=>{const context=useContext(NotificationContext);if(!context){throw new Error('useNotification must be used within a NotificationProvider');}return context;};export const NotificationProvider=_ref=>{let{children,socket}=_ref;const[unreadCount,setUnreadCount]=useState(0);const[notifications,setNotifications]=useState([]);const{user}=useAuth();useEffect(()=>{if(socket&&user){// Join user room for real-time notifications\nsocket.emit('join',user.id);// Listen for new notifications\nsocket.on('notification',notification=>{setNotifications(prev=>[notification,...prev]);setUnreadCount(prev=>prev+1);// Show toast notification\ntoast(notification.message,{icon:'ðŸ””',duration:4000});});return()=>{socket.off('notification');};}},[socket,user]);const markAsRead=notificationIds=>{setNotifications(prev=>prev.map(notification=>notificationIds.includes(notification.id)?{...notification,is_read:true}:notification));setUnreadCount(prev=>Math.max(0,prev-notificationIds.length));};const addNotification=notification=>{setNotifications(prev=>[notification,...prev]);setUnreadCount(prev=>prev+1);};const value={unreadCount,notifications,setUnreadCount,setNotifications,markAsRead,addNotification};return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","toast","jsx","_jsx","NotificationContext","useNotification","context","Error","NotificationProvider","_ref","children","socket","unreadCount","setUnreadCount","notifications","setNotifications","user","emit","id","on","notification","prev","message","icon","duration","off","markAsRead","notificationIds","map","includes","is_read","Math","max","length","addNotification","value","Provider"],"sources":["/Users/sam/Downloads/stackit/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["// frontend/src/contexts/NotificationContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport toast from 'react-hot-toast';\n\nconst NotificationContext = createContext();\n\nexport const useNotification = () => {\n    const context = useContext(NotificationContext);\n    if (!context) {\n        throw new Error('useNotification must be used within a NotificationProvider');\n    }\n    return context;\n};\n\nexport const NotificationProvider = ({ children, socket }) => {\n    const [unreadCount, setUnreadCount] = useState(0);\n    const [notifications, setNotifications] = useState([]);\n    const { user } = useAuth();\n\n    useEffect(() => {\n        if (socket && user) {\n            // Join user room for real-time notifications\n            socket.emit('join', user.id);\n\n            // Listen for new notifications\n            socket.on('notification', (notification) => {\n                setNotifications(prev => [notification, ...prev]);\n                setUnreadCount(prev => prev + 1);\n                \n                // Show toast notification\n                toast(notification.message, {\n                    icon: 'ðŸ””',\n                    duration: 4000,\n                });\n            });\n\n            return () => {\n                socket.off('notification');\n            };\n        }\n    }, [socket, user]);\n\n    const markAsRead = (notificationIds) => {\n        setNotifications(prev => \n            prev.map(notification => \n                notificationIds.includes(notification.id) \n                    ? { ...notification, is_read: true }\n                    : notification\n            )\n        );\n        setUnreadCount(prev => Math.max(0, prev - notificationIds.length));\n    };\n\n    const addNotification = (notification) => {\n        setNotifications(prev => [notification, ...prev]);\n        setUnreadCount(prev => prev + 1);\n    };\n\n    const value = {\n        unreadCount,\n        notifications,\n        setUnreadCount,\n        setNotifications,\n        markAsRead,\n        addNotification\n    };\n\n    return (\n        <NotificationContext.Provider value={value}>\n            {children}\n        </NotificationContext.Provider>\n    );\n};\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,OAAO,KAAQ,eAAe,CACvC,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpC,KAAM,CAAAC,mBAAmB,cAAGR,aAAa,CAAC,CAAC,CAE3C,MAAO,MAAM,CAAAS,eAAe,CAAGA,CAAA,GAAM,CACjC,KAAM,CAAAC,OAAO,CAAGT,UAAU,CAACO,mBAAmB,CAAC,CAC/C,GAAI,CAACE,OAAO,CAAE,CACV,KAAM,IAAI,CAAAC,KAAK,CAAC,4DAA4D,CAAC,CACjF,CACA,MAAO,CAAAD,OAAO,CAClB,CAAC,CAED,MAAO,MAAM,CAAAE,oBAAoB,CAAGC,IAAA,EAA0B,IAAzB,CAAEC,QAAQ,CAAEC,MAAO,CAAC,CAAAF,IAAA,CACrD,KAAM,CAACG,WAAW,CAAEC,cAAc,CAAC,CAAGf,QAAQ,CAAC,CAAC,CAAC,CACjD,KAAM,CAACgB,aAAa,CAAEC,gBAAgB,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAAEkB,IAAK,CAAC,CAAGhB,OAAO,CAAC,CAAC,CAE1BD,SAAS,CAAC,IAAM,CACZ,GAAIY,MAAM,EAAIK,IAAI,CAAE,CAChB;AACAL,MAAM,CAACM,IAAI,CAAC,MAAM,CAAED,IAAI,CAACE,EAAE,CAAC,CAE5B;AACAP,MAAM,CAACQ,EAAE,CAAC,cAAc,CAAGC,YAAY,EAAK,CACxCL,gBAAgB,CAACM,IAAI,EAAI,CAACD,YAAY,CAAE,GAAGC,IAAI,CAAC,CAAC,CACjDR,cAAc,CAACQ,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAEhC;AACApB,KAAK,CAACmB,YAAY,CAACE,OAAO,CAAE,CACxBC,IAAI,CAAE,IAAI,CACVC,QAAQ,CAAE,IACd,CAAC,CAAC,CACN,CAAC,CAAC,CAEF,MAAO,IAAM,CACTb,MAAM,CAACc,GAAG,CAAC,cAAc,CAAC,CAC9B,CAAC,CACL,CACJ,CAAC,CAAE,CAACd,MAAM,CAAEK,IAAI,CAAC,CAAC,CAElB,KAAM,CAAAU,UAAU,CAAIC,eAAe,EAAK,CACpCZ,gBAAgB,CAACM,IAAI,EACjBA,IAAI,CAACO,GAAG,CAACR,YAAY,EACjBO,eAAe,CAACE,QAAQ,CAACT,YAAY,CAACF,EAAE,CAAC,CACnC,CAAE,GAAGE,YAAY,CAAEU,OAAO,CAAE,IAAK,CAAC,CAClCV,YACV,CACJ,CAAC,CACDP,cAAc,CAACQ,IAAI,EAAIU,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEX,IAAI,CAAGM,eAAe,CAACM,MAAM,CAAC,CAAC,CACtE,CAAC,CAED,KAAM,CAAAC,eAAe,CAAId,YAAY,EAAK,CACtCL,gBAAgB,CAACM,IAAI,EAAI,CAACD,YAAY,CAAE,GAAGC,IAAI,CAAC,CAAC,CACjDR,cAAc,CAACQ,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CACpC,CAAC,CAED,KAAM,CAAAc,KAAK,CAAG,CACVvB,WAAW,CACXE,aAAa,CACbD,cAAc,CACdE,gBAAgB,CAChBW,UAAU,CACVQ,eACJ,CAAC,CAED,mBACI/B,IAAA,CAACC,mBAAmB,CAACgC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAzB,QAAA,CACtCA,QAAQ,CACiB,CAAC,CAEvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}